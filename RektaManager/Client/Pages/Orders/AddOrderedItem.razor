@using RektaManager.Shared
@using RektaManager.Shared.ComponentModels.Orders
@inject ILocalStorageService LocalStorage
@inject DialogService Dialog
<h3>Add <b>@Model.ItemName</b></h3>
<EditForm Model="@orderedItem" OnValidSubmit="HandleOrderAddition">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label for="itemName"><b> Item Name :</b></label>
        <InputText @bind-Value="@Model.ItemName" readonly class="form-control col-sm-6" id="itemName" />
    </div>

    <div class="form-group">
        <label for="itemPrice"><b> Price :</b></label>
        <InputNumber TValue="decimal" @bind-Value="@Model.Price" readonly class="form-control col-sm-4" id="itemPrice" />
    </div>

    <div class="form-group">
        <label for="itemQuantity"><b> Quantity :</b></label>
        <InputNumber TValue="float" @bind-Value="@Model.Quantity" class="form-control col-sm-4" id="itemQuantity" />
        <ValidationMessage For="@(() => Model.Quantity)"/>
    </div>
    
    <div class="form-group">
        <span class="text-danger">
            <ValidationSummary/>
        </span>
    </div>
    <div class="form-group"><button class="btn btn-success" type="submit">Add</button></div>
</EditForm>

@code {
    [Parameter]
    public OrderItemComponentModel Model { get; set; }

    [CascadingParameter]
    public OrderState State { get; set; }



    OrderedItemUpsertComponentModel orderedItem = new();



    protected override void OnInitialized()
    {
        Dialog.OnClose += HandleClose;
    }

    private async Task HandleOrderAddition()
    {
        //TODO: Fix issue with form validation. 2. Now nofification badge to indicate order and work on finishing order (order->invoice->invoicepayment)
        //once the item has been added. Close the dialog. also we need to store the order summary in localstorage
        orderedItem.ItemCode = Model.ItemName;
        orderedItem.ItemName = Model.ItemName;
        orderedItem.Quantity = Model.Quantity;
        orderedItem.ItemPrice = Model.Price;

        State.OrderedItems.Add(orderedItem);

        await LocalStorage
            .SetItemAsync($"order-{orderedItem.ItemName}{DateTimeOffset.UtcNow.LocalDateTime.ToString("dd-MM-yy")}-{DateTimeOffset.UtcNow.Ticks}",
                orderedItem);
        Dialog.Close();
    }

    private async void HandleClose(dynamic result = null)
    {
        await InvokeAsync(() => { StateHasChanged(); });
    }

}
