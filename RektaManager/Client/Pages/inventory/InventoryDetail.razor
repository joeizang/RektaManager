@page "/inventory/details/{InventoryId:int}"
@using RektaManager.Client.Utils
@using RektaManager.Shared.ComponentModels.Inventories
@using System.Text.Json
@inject HttpClient HttpService


<h3>Inventory Detail</h3>

<div class="d-flex justify-content-center align-items-center">
    <div class="card shadow p-0 bg-white rounded">
        <h5 class="card-header bg-secondary">@_details.Name</h5>
        <div class="card-body">
            <p><b>Created On :</b>@_details.SupplyDate.ToString("dd-MMM-yyyy")</p>
            <p><b>At :</b>@_details.SupplyDate.ToLocalTime().ToString("h:mm:ss tt zz")</p>
            <p class="card-subtitle text-center font-weight-bold">Products</p>
            <span><button class="btn btn-dark" @onclick="@ShowProducts" style="display: @_showButton">More info...</button></span>
            <div style="display: @_displayProp;">
                <ProductDetails Model="@_moreDetails"/>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int InventoryId { get; set; }

    private string _displayProp = "none";
    private string _showButton = "inline";

    private InventoryUpsertComponentModel _details = new InventoryUpsertComponentModel();
    private InventoryDetailComponentModel _moreDetails = new InventoryDetailComponentModel();
    private List<string> list = new List<string>() { "Gulder", "Star", "Star Lite", "33 Beer" };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpService.GetAsync($"api/inventories/{InventoryId}");

            if (response.IsSuccessStatusCode)
            {
                _details = JsonSerializer
                    .Deserialize<InventoryUpsertComponentModel>(await response.Content.ReadAsStringAsync(),
                        new JsonSerializerOptions() {PropertyNameCaseInsensitive = true});
                _moreDetails.ProductNames = list;
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }

    async Task ShowProducts()
    {
        _displayProp = "block";
        _showButton = "none";
        await Task.Delay(4000);

    }

}
