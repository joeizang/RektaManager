// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RektaManagerApp.Server.Data;

namespace RektaManagerApp.Server.Migrations
{
    [DbContext(typeof(RektaManagerAppContext))]
    [Migration("20210627134623_InitAppDb")]
    partial class InitAppDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("BillChartOfAccounts", b =>
                {
                    b.Property<string>("BillsId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("ChartOfAccountsId")
                        .HasColumnType("int");

                    b.HasKey("BillsId", "ChartOfAccountsId");

                    b.HasIndex("ChartOfAccountsId");

                    b.ToTable("BillChartOfAccounts");
                });

            modelBuilder.Entity("ChartOfAccountsInvoice", b =>
                {
                    b.Property<int>("ChartOfAccountsId")
                        .HasColumnType("int");

                    b.Property<string>("InvoicesId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("ChartOfAccountsId", "InvoicesId");

                    b.HasIndex("InvoicesId");

                    b.ToTable("ChartOfAccountsInvoice");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DeviceCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.HasKey("UserCode");

                    b.ToTable("DeviceFlowCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(90)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(90)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Name")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 27, 13, 46, 22, 409, DateTimeKind.Unspecified).AddTicks(2305), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 27, 13, 46, 22, 409, DateTimeKind.Unspecified).AddTicks(9077), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("Id");

                    b.ToTable("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "e9d96fa9-4a7f-4c53-8acf-99e3b08ddc56",
                            ConcurrencyStamp = "13549c13-2c3e-409b-8ce6-f67f10256563",
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 368, DateTimeKind.Unspecified).AddTicks(2675), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Admins",
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 368, DateTimeKind.Unspecified).AddTicks(2214), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = "86a2ff29-5661-45a8-8c87-61534337c36a",
                            ConcurrencyStamp = "421de3ba-f477-44b1-a422-33d78905b838",
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 368, DateTimeKind.Unspecified).AddTicks(3672), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Users",
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 368, DateTimeKind.Unspecified).AddTicks(3644), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = "805d7a87-8089-4c32-8c05-b746d2b262ff",
                            ConcurrencyStamp = "8f6464ed-e46d-4927-adfc-e889baa08026",
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 368, DateTimeKind.Unspecified).AddTicks(3688), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Owner",
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 368, DateTimeKind.Unspecified).AddTicks(3682), new TimeSpan(0, 1, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 27, 13, 46, 22, 399, DateTimeKind.Unspecified).AddTicks(4409), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("OtherNames")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StaffIdNumber")
                        .HasColumnType("text");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varbinary(4000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 27, 13, 46, 22, 408, DateTimeKind.Unspecified).AddTicks(4073), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("BillPaymentId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("ChartOfAccountsId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("FullyPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("References")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BillPaymentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BillActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("FullPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PartPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reference")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BillPayments");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillPaymentActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BillPaymentActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookingId")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookedItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6702), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "500 Capacity Tent",
                            Price = 40000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6716), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6731), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "350 Capacity Tent",
                            Price = 30000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6735), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6749), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "250 Capacity Tent",
                            Price = 20000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6753), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6765), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "100 Capacity Tent",
                            Price = 8000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6768), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6782), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Tiffany Chairs",
                            Price = 200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6785), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6797), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Plastic Chairs",
                            Price = 30m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6801), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6812), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Banquet Tables",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6816), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6882), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Plastic Tables",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6888), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6900), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Light Decoration",
                            Price = 20000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6903), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6916), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Medium Decoration",
                            Price = 100000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6921), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6928), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Heavy Decoration",
                            Price = 200000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6931), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6939), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Very Heavy Decoration",
                            Price = 300000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(6942), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookedItemActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BookedItemActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("BookingDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(20,2)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFullyPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StaffId")
                        .HasColumnType("text");

                    b.Property<string>("StaffProcessingId")
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("StaffProcessingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookingActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BookingAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookingSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookingId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("BookingSales");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ChartOfAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChartOfAccounts");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ChartOfAccountsActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChartOfAccountsActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(44)
                        .HasColumnType("varchar(44)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.CustomerActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CustomerActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset>("SupplyDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalInventoryValuation")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InventoryActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(8556), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Non Alcoholic drinks",
                            IsDeleted = false,
                            Name = "SOFT DRINKS",
                            Timestamp = new DateTime(2021, 6, 27, 13, 46, 22, 370, DateTimeKind.Utc).AddTicks(8572),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(8568), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(9037), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Alcoholic Beverage drinks",
                            IsDeleted = false,
                            Name = "DRINKS",
                            Timestamp = new DateTime(2021, 6, 27, 13, 46, 22, 370, DateTimeKind.Utc).AddTicks(9043),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(9040), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(9050), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Both alcoholic and non alcoholic drinks",
                            IsDeleted = false,
                            Name = "WINE AND SPIRITS",
                            Timestamp = new DateTime(2021, 6, 27, 13, 46, 22, 370, DateTimeKind.Utc).AddTicks(9055),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(9052), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(9061), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Cooked Food and other types of Food",
                            IsDeleted = false,
                            Name = "FOODS",
                            Timestamp = new DateTime(2021, 6, 27, 13, 46, 22, 370, DateTimeKind.Utc).AddTicks(9068),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(9064), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryCategoryActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InventoryCategoryActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("FullyPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("InvoicePaymentId")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoicePaymentId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoiceActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoicePayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("FullPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PartPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reference")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoicePayments");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoicePaymentsActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoicePaymentsActionAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp");

                    b.Property<float>("OrderedItemsCount")
                        .HasColumnType("float");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1113), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Semo-Any",
                            ItemName = "Semovita/Any Soup",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1125), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1136), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Eba-Any",
                            ItemName = "Eba/Any Soup",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1139), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1148), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Beans-P",
                            ItemName = "Beans-Plantain",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1150), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1157), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "F-Rice",
                            ItemName = "Fried Rice",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1160), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1168), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "J-Rice",
                            ItemName = "Jollof Rice",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1171), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1178), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Rice-Stew",
                            ItemName = "Rice-Stew",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1180), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1188), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Chips-Eggs",
                            ItemName = "Chips-Eggs",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1190), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1198), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "IndomieEgg",
                            ItemName = "Indomie-Egg",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1200), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1207), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "LeafMoimoi",
                            ItemName = "Leaf Moimoi",
                            Price = 200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1210), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1217), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "CowLeg",
                            ItemName = "CowLeg P.Soup",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1220), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1227), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Cowtail",
                            ItemName = "CowTail P.Soup",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1230), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1237), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Fresh-Fish",
                            ItemName = "Fresh Fish",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1240), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1247), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Intestine",
                            ItemName = "Intestine",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1250), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1257), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "PepChicken",
                            ItemName = "Peppered Chicken",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1260), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1267), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "PepGoat",
                            ItemName = "Asun",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1270), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1277), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Gizdodo",
                            ItemName = "Gizdodo",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1279), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1287), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Coleslaw",
                            ItemName = "Coleslaw",
                            Price = 200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1289), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1296), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "MixedSalad",
                            ItemName = "Mixed Salad",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1299), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1306), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Semo-Any",
                            ItemName = "Potato Salad",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1309), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1316), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ShwmChick",
                            ItemName = "Shawarma Chicken",
                            Price = 1200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1319), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1326), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ShwmBeef",
                            ItemName = "Shawarma Beef",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1329), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1336), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ShwmChick",
                            ItemName = "Burger",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1338), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1346), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "TilapiaBig",
                            ItemName = "Roasted Tilapia",
                            Price = 2000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1348), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1355), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "TilapiaSm",
                            ItemName = "Roasted Tilapia",
                            Price = 1800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1358), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1365), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "StmCatfish",
                            ItemName = "Steamed Catfish",
                            Price = 3500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1368), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1375), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "CatfishSm",
                            ItemName = "Steamed Catfish",
                            Price = 3000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1378), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1385), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Isiewu",
                            ItemName = "Isiewu",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1387), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1395), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Heineken",
                            ItemName = "Heineken",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1397), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1404), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "MedStout",
                            ItemName = "Medium Stout",
                            Price = 400m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1407), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1414), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ExSmooth",
                            ItemName = "Extra Smooth",
                            Price = 400m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1417), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1424), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Smirnoff",
                            ItemName = "Smirnoff Ice",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1427), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1434), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Big-Origin",
                            ItemName = "Big Origin",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1437), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1445), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Tiger",
                            ItemName = "Tiger",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1448), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1455), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Radler",
                            ItemName = "Radler",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1458), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1465), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Gulder",
                            ItemName = "Gulder",
                            Price = 350m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1467), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1474), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Golfberg",
                            ItemName = "Golfberg",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1477), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1484), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Star",
                            ItemName = "Star",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1487), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1494), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "StarLite",
                            ItemName = "StarLite",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1497), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1504), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Legend",
                            ItemName = "Legend",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1506), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1514), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "CastleLite",
                            ItemName = "Castle-Lite",
                            Price = 350m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1516), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1523), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "D-Black",
                            ItemName = "Double-Black",
                            Price = 350m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1526), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1533), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Hero",
                            ItemName = "Hero",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1535), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1542), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Trophy",
                            ItemName = "Trophy",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1545), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1552), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Budweiser",
                            ItemName = "Budweiser",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1554), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1562), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Coke",
                            ItemName = "Coke",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1564), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1571), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Sprite",
                            ItemName = "Sprite",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1574), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1581), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Fanta",
                            ItemName = "Fanta",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1583), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1590), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Can-Malt",
                            ItemName = "Can Malt",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1592), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1600), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "MaltBottle",
                            ItemName = "Bottled Malt",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1602), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1609), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Juice",
                            ItemName = "Juice",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1612), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1619), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Water",
                            ItemName = "Water",
                            Price = 100m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1621), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1628), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "EnergyDnk",
                            ItemName = "Energy Drink",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1631), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1638), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Mateaus",
                            ItemName = "Mateaus",
                            Price = 3000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1641), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1648), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Donfed",
                            ItemName = "DonFelder",
                            Price = 3000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1650), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1658), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Donfed",
                            ItemName = "Four Cousins",
                            Price = 2700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1660), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1667), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Baron",
                            ItemName = "Baron",
                            Price = 2000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 371, DateTimeKind.Unspecified).AddTicks(1669), new TimeSpan(0, 1, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderItemActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderItemActionsAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderSales");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(767)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedItems");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderedItemActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderedItemActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductInventoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductUniqueIdentifier")
                        .HasColumnType("text");

                    b.Property<double>("QuantityBought")
                        .HasColumnType("double");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int>("UnitMeasure")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductInventoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductCategoryActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategoryActionsAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookingId")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(3189), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Wedding",
                            Price = 100000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(3667), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4914), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "BirthdaysAnniversaries",
                            Price = 40000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4917), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4928), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "ChildBirthdays",
                            Price = 20000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4931), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4940), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Hangouts",
                            Price = 40000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4942), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4950), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Concerts",
                            Price = 100000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4953), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4961), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Picnics",
                            Price = 5000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4963), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4972), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Corporate Events",
                            Price = 50000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4974), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4982), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Party (Indoor)",
                            Price = 30000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4985), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4994), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "MiniConference-Training",
                            Price = 20000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 27, 14, 46, 22, 370, DateTimeKind.Unspecified).AddTicks(4997), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ServiceActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceActionsAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.StaffShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(90)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("OffDay")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("ShiftEndsAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("ShiftStartsAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffShifts");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.StaffShiftActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StaffShiftActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("varchar(44)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.SupplierActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SupplierActionsAudits");
                });

            modelBuilder.Entity("BillChartOfAccounts", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Bill", null)
                        .WithMany()
                        .HasForeignKey("BillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.ChartOfAccounts", null)
                        .WithMany()
                        .HasForeignKey("ChartOfAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChartOfAccountsInvoice", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.ChartOfAccounts", null)
                        .WithMany()
                        .HasForeignKey("ChartOfAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Invoice", null)
                        .WithMany()
                        .HasForeignKey("InvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Bill", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.BillPayment", "BillPayment")
                        .WithMany("Bills")
                        .HasForeignKey("BillPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RektaManagerApp.Shared.Supplier", "Supplier")
                        .WithMany("SupplierBills")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillPayment");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookedItem", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Booking", null)
                        .WithMany("BookedItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Booking", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Customer", "Customer")
                        .WithMany("CustomerBookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RektaManagerApp.Shared.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", "StaffProcessing")
                        .WithMany("HandledBookings")
                        .HasForeignKey("StaffProcessingId");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("StaffProcessing");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookingSales", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Booking", "Booking")
                        .WithMany("BookingSalesInvoices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Invoice", "Invoice")
                        .WithMany("Bookings")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryCategory", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Inventory", null)
                        .WithMany("InventoryCategories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Invoice", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Customer", "Customer")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.InvoicePayment", "InvoicePayment")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoicePaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("InvoicePayment");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Order", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", "Staff")
                        .WithMany("ProcessedOrders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderSales", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Invoice", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Order", "Order")
                        .WithMany("OrderSalesInvoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderedItem", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Order", "OwningOrder")
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OwningOrder");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Product", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Inventory", "ProductInventory")
                        .WithMany("Products")
                        .HasForeignKey("ProductInventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Supplier", null)
                        .WithMany("SuppliedProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInventory");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductCategory", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Product", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Service", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Booking", null)
                        .WithMany("BookedServices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.StaffShift", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", null)
                        .WithMany("StaffShifts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ApplicationUser", b =>
                {
                    b.Navigation("HandledBookings");

                    b.Navigation("ProcessedOrders");

                    b.Navigation("StaffShifts");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillPayment", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Booking", b =>
                {
                    b.Navigation("BookedItems");

                    b.Navigation("BookedServices");

                    b.Navigation("BookingSalesInvoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Customer", b =>
                {
                    b.Navigation("CustomerBookings");

                    b.Navigation("CustomerInvoices");

                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Inventory", b =>
                {
                    b.Navigation("InventoryCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Invoice", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoicePayment", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Order", b =>
                {
                    b.Navigation("OrderedItems");

                    b.Navigation("OrderSalesInvoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Supplier", b =>
                {
                    b.Navigation("SuppliedProducts");

                    b.Navigation("SupplierBills");
                });
#pragma warning restore 612, 618
        }
    }
}
