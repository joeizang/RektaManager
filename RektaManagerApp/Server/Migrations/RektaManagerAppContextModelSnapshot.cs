// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RektaManagerApp.Server.Data;

namespace RektaManagerApp.Server.Migrations
{
    [DbContext(typeof(RektaManagerAppContext))]
    partial class RektaManagerAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("BillChartOfAccounts", b =>
                {
                    b.Property<string>("BillsId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("ChartOfAccountsId")
                        .HasColumnType("int");

                    b.HasKey("BillsId", "ChartOfAccountsId");

                    b.HasIndex("ChartOfAccountsId");

                    b.ToTable("BillChartOfAccounts");
                });

            modelBuilder.Entity("ChartOfAccountsInvoice", b =>
                {
                    b.Property<int>("ChartOfAccountsId")
                        .HasColumnType("int");

                    b.Property<string>("InvoicesId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("ChartOfAccountsId", "InvoicesId");

                    b.HasIndex("InvoicesId");

                    b.ToTable("ChartOfAccountsInvoice");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DeviceCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.HasKey("UserCode");

                    b.ToTable("DeviceFlowCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(90)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(90)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Name")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 17, 21, 53, 11, 153, DateTimeKind.Unspecified).AddTicks(1736), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 17, 21, 53, 11, 153, DateTimeKind.Unspecified).AddTicks(6796), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("Id");

                    b.ToTable("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "3a11b384-bc25-436e-aa76-bfe4b825abeb",
                            ConcurrencyStamp = "22c2ca80-4880-4cc6-9713-1c12bcf07cb5",
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 123, DateTimeKind.Unspecified).AddTicks(7811), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Admins",
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 123, DateTimeKind.Unspecified).AddTicks(7448), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = "ea3906dd-668e-439c-9fdd-06730841186f",
                            ConcurrencyStamp = "c9d92978-0d09-4fb5-adad-811cdc4913f5",
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 123, DateTimeKind.Unspecified).AddTicks(8901), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Users",
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 123, DateTimeKind.Unspecified).AddTicks(8881), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = "5d5ee991-722a-4089-83ee-52a824b8e3b2",
                            ConcurrencyStamp = "7bdc34e3-b326-4a5e-8c91-99a6e9492384",
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 123, DateTimeKind.Unspecified).AddTicks(8912), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Owner",
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 123, DateTimeKind.Unspecified).AddTicks(8908), new TimeSpan(0, 1, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 17, 21, 53, 11, 146, DateTimeKind.Unspecified).AddTicks(1902), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("OtherNames")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StaffIdNumber")
                        .HasColumnType("text");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varbinary(4000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 17, 21, 53, 11, 152, DateTimeKind.Unspecified).AddTicks(3656), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("BillPaymentId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("ChartOfAccountsId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("FullyPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("References")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BillPaymentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BillActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("FullPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PartPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reference")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BillPayments");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillPaymentActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BillPaymentActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookingId")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookedItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4090), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "500 Capacity Tent",
                            Price = 40000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4097), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4106), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "350 Capacity Tent",
                            Price = 30000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4108), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4113), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "250 Capacity Tent",
                            Price = 20000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4115), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4120), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "100 Capacity Tent",
                            Price = 8000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4122), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4127), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Tiffany Chairs",
                            Price = 200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4129), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4134), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Plastic Chairs",
                            Price = 30m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4135), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4141), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Banquet Tables",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4143), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4148), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Plastic Tables",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4150), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4156), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Light Decoration",
                            Price = 20000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4158), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4163), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Medium Decoration",
                            Price = 100000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4165), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4170), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Heavy Decoration",
                            Price = 200000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4171), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4176), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Very Heavy Decoration",
                            Price = 300000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(4178), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookedItemActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BookedItemActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("BookingDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(20,2)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId1")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFullyPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPartPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StaffId")
                        .HasColumnType("text");

                    b.Property<string>("StaffProcessingId")
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId1");

                    b.HasIndex("StaffProcessingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookingActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BookingAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookingSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookingId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("BookingSales");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ChartOfAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChartOfAccounts");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ChartOfAccountsActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChartOfAccountsActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(44)
                        .HasColumnType("varchar(44)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.CustomerActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CustomerActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset>("SupplyDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalInventoryValuation")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InventoryActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(5308), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Non Alcoholic drinks",
                            IsDeleted = false,
                            Name = "SOFT DRINKS",
                            Timestamp = new DateTime(2021, 6, 17, 21, 53, 11, 125, DateTimeKind.Utc).AddTicks(5316),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(5314), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(5630), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Alcoholic Beverage drinks",
                            IsDeleted = false,
                            Name = "DRINKS",
                            Timestamp = new DateTime(2021, 6, 17, 21, 53, 11, 125, DateTimeKind.Utc).AddTicks(5634),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(5632), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(5639), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Both alcoholic and non alcoholic drinks",
                            IsDeleted = false,
                            Name = "WINE AND SPIRITS",
                            Timestamp = new DateTime(2021, 6, 17, 21, 53, 11, 125, DateTimeKind.Utc).AddTicks(5642),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(5640), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(5646), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Cooked Food and other types of Food",
                            IsDeleted = false,
                            Name = "FOODS",
                            Timestamp = new DateTime(2021, 6, 17, 21, 53, 11, 125, DateTimeKind.Utc).AddTicks(5649),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(5648), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryCategoryActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InventoryCategoryActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("FullyPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("InvoicePaymentId")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoicePaymentId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoiceActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoicePayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("FullPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PartPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reference")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoicePayments");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoicePaymentsActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoicePaymentsActionAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp");

                    b.Property<float>("OrderedItemsCount")
                        .HasColumnType("float");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6949), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Semo-Any",
                            ItemName = "Semovita/Any Soup",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6956), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6965), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Eba-Any",
                            ItemName = "Eba/Any Soup",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6966), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6972), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Beans-P",
                            ItemName = "Beans-Plantain",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6973), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6979), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "F-Rice",
                            ItemName = "Fried Rice",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6980), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6985), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "J-Rice",
                            ItemName = "Jollof Rice",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6987), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6992), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Rice-Stew",
                            ItemName = "Rice-Stew",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6994), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(6999), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Chips-Eggs",
                            ItemName = "Chips-Eggs",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7000), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7006), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "IndomieEgg",
                            ItemName = "Indomie-Egg",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7007), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7012), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "LeafMoimoi",
                            ItemName = "Leaf Moimoi",
                            Price = 200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7014), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7019), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "CowLeg",
                            ItemName = "CowLeg P.Soup",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7021), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7026), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Cowtail",
                            ItemName = "CowTail P.Soup",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7028), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7033), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Fresh-Fish",
                            ItemName = "Fresh Fish",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7034), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7039), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Intestine",
                            ItemName = "Intestine",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7041), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7046), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "PepChicken",
                            ItemName = "Peppered Chicken",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7048), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7053), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "PepGoat",
                            ItemName = "Asun",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7054), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7060), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Gizdodo",
                            ItemName = "Gizdodo",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7061), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7066), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Coleslaw",
                            ItemName = "Coleslaw",
                            Price = 200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7069), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7073), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "MixedSalad",
                            ItemName = "Mixed Salad",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7075), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7080), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Semo-Any",
                            ItemName = "Potato Salad",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7082), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7087), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ShwmChick",
                            ItemName = "Shawarma Chicken",
                            Price = 1200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7088), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7093), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ShwmBeef",
                            ItemName = "Shawarma Beef",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7095), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7100), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ShwmChick",
                            ItemName = "Burger",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7102), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7107), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "TilapiaBig",
                            ItemName = "Roasted Tilapia",
                            Price = 2000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7108), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7114), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "TilapiaSm",
                            ItemName = "Roasted Tilapia",
                            Price = 1800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7115), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7120), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "StmCatfish",
                            ItemName = "Steamed Catfish",
                            Price = 3500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7122), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7127), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "CatfishSm",
                            ItemName = "Steamed Catfish",
                            Price = 3000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7129), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7134), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Isiewu",
                            ItemName = "Isiewu",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7135), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7141), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Heineken",
                            ItemName = "Heineken",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7143), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7148), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "MedStout",
                            ItemName = "Medium Stout",
                            Price = 400m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7150), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7155), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ExSmooth",
                            ItemName = "Extra Smooth",
                            Price = 400m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7156), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7213), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Smirnoff",
                            ItemName = "Smirnoff Ice",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7214), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7220), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Big-Origin",
                            ItemName = "Big Origin",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7222), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7227), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Tiger",
                            ItemName = "Tiger",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7228), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7233), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Radler",
                            ItemName = "Radler",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7235), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7239), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Gulder",
                            ItemName = "Gulder",
                            Price = 350m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7241), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7247), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Golfberg",
                            ItemName = "Golfberg",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7248), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7253), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Star",
                            ItemName = "Star",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7255), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7260), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "StarLite",
                            ItemName = "StarLite",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7262), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7266), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Legend",
                            ItemName = "Legend",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7268), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7273), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "CastleLite",
                            ItemName = "Castle-Lite",
                            Price = 350m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7274), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7279), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "D-Black",
                            ItemName = "Double-Black",
                            Price = 350m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7281), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7285), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Hero",
                            ItemName = "Hero",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7287), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7292), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Trophy",
                            ItemName = "Trophy",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7293), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7298), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Budweiser",
                            ItemName = "Budweiser",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7299), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7304), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Coke",
                            ItemName = "Coke",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7306), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7311), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Sprite",
                            ItemName = "Sprite",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7312), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7317), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Fanta",
                            ItemName = "Fanta",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7319), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7324), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Can-Malt",
                            ItemName = "Can Malt",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7325), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7330), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "MaltBottle",
                            ItemName = "Bottled Malt",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7332), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7337), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Juice",
                            ItemName = "Juice",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7338), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7343), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Water",
                            ItemName = "Water",
                            Price = 100m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7345), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7349), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "EnergyDnk",
                            ItemName = "Energy Drink",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7351), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7356), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Mateaus",
                            ItemName = "Mateaus",
                            Price = 3000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7357), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7362), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Donfed",
                            ItemName = "DonFelder",
                            Price = 3000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7364), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7368), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Donfed",
                            ItemName = "Four Cousins",
                            Price = 2700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7370), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7375), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Baron",
                            ItemName = "Baron",
                            Price = 2000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(7376), new TimeSpan(0, 1, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderItemActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderItemActionsAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderSales");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(767)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedItems");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderedItemActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderedItemActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductInventoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductUniqueIdentifier")
                        .HasColumnType("text");

                    b.Property<double>("QuantityBought")
                        .HasColumnType("double");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int>("UnitMeasure")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductInventoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductCategoryActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategoryActionsAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookingId")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(1635), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Wedding",
                            Price = 100000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(1947), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2768), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "BirthdaysAnniversaries",
                            Price = 40000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2772), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2782), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "ChildBirthdays",
                            Price = 20000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2784), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2890), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Hangouts",
                            Price = 40000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2892), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2898), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Concerts",
                            Price = 100000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2899), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2905), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Picnics",
                            Price = 5000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2907), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2912), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Corporate Events",
                            Price = 50000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2913), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2919), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "Party (Indoor)",
                            Price = 30000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2921), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2927), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "owner@rektaparkgardens.com",
                            IsDeleted = false,
                            Name = "MiniConference-Training",
                            Price = 20000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 17, 22, 53, 11, 125, DateTimeKind.Unspecified).AddTicks(2929), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "owner@rektaparkgardens.com"
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ServiceActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceActionsAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.StaffShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(90)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("OffDay")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("ShiftEndsAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("ShiftStartsAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffShifts");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.StaffShiftActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StaffShiftActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("varchar(44)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.SupplierActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SupplierActionsAudits");
                });

            modelBuilder.Entity("BillChartOfAccounts", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Bill", null)
                        .WithMany()
                        .HasForeignKey("BillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.ChartOfAccounts", null)
                        .WithMany()
                        .HasForeignKey("ChartOfAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChartOfAccountsInvoice", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.ChartOfAccounts", null)
                        .WithMany()
                        .HasForeignKey("ChartOfAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Invoice", null)
                        .WithMany()
                        .HasForeignKey("InvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Bill", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.BillPayment", "BillPayment")
                        .WithMany("Bills")
                        .HasForeignKey("BillPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RektaManagerApp.Shared.Supplier", "Supplier")
                        .WithMany("SupplierBills")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillPayment");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookedItem", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Booking", null)
                        .WithMany("BookedItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Booking", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Customer", "Customer")
                        .WithMany("CustomerBookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RektaManagerApp.Shared.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId1");

                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", "StaffProcessing")
                        .WithMany("HandledBookings")
                        .HasForeignKey("StaffProcessingId");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("StaffProcessing");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookingSales", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Booking", "Booking")
                        .WithMany("BookingSalesInvoices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Invoice", "Invoice")
                        .WithMany("Bookings")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryCategory", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Inventory", null)
                        .WithMany("InventoryCategories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Invoice", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Customer", "Customer")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.InvoicePayment", "InvoicePayment")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoicePaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("InvoicePayment");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Order", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", "Staff")
                        .WithMany("ProcessedOrders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderSales", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Invoice", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Order", "Order")
                        .WithMany("OrderSalesInvoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderedItem", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Order", "OwningOrder")
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OwningOrder");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Product", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Inventory", "ProductInventory")
                        .WithMany("Products")
                        .HasForeignKey("ProductInventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Supplier", null)
                        .WithMany("SuppliedProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInventory");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductCategory", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Product", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Service", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Booking", null)
                        .WithMany("BookedServices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.StaffShift", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", null)
                        .WithMany("StaffShifts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ApplicationUser", b =>
                {
                    b.Navigation("HandledBookings");

                    b.Navigation("ProcessedOrders");

                    b.Navigation("StaffShifts");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillPayment", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Booking", b =>
                {
                    b.Navigation("BookedItems");

                    b.Navigation("BookedServices");

                    b.Navigation("BookingSalesInvoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Customer", b =>
                {
                    b.Navigation("CustomerBookings");

                    b.Navigation("CustomerInvoices");

                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Inventory", b =>
                {
                    b.Navigation("InventoryCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Invoice", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoicePayment", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Order", b =>
                {
                    b.Navigation("OrderedItems");

                    b.Navigation("OrderSalesInvoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Supplier", b =>
                {
                    b.Navigation("SuppliedProducts");

                    b.Navigation("SupplierBills");
                });
#pragma warning restore 612, 618
        }
    }
}
