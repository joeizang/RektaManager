// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RektaManagerApp.Server.Data;

namespace RektaManagerApp.Server.Migrations
{
    [DbContext(typeof(RektaManagerAppContext))]
    partial class RektaManagerAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("BillChartOfAccounts", b =>
                {
                    b.Property<string>("BillsId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("ChartOfAccountsId")
                        .HasColumnType("int");

                    b.HasKey("BillsId", "ChartOfAccountsId");

                    b.HasIndex("ChartOfAccountsId");

                    b.ToTable("BillChartOfAccounts");
                });

            modelBuilder.Entity("ChartOfAccountsInvoice", b =>
                {
                    b.Property<int>("ChartOfAccountsId")
                        .HasColumnType("int");

                    b.Property<string>("InvoicesId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("ChartOfAccountsId", "InvoicesId");

                    b.HasIndex("InvoicesId");

                    b.ToTable("ChartOfAccountsInvoice");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DeviceCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.HasKey("UserCode");

                    b.ToTable("DeviceFlowCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(90)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(90)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Name")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 13, 23, 8, 27, 625, DateTimeKind.Unspecified).AddTicks(4231), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 13, 23, 8, 27, 625, DateTimeKind.Unspecified).AddTicks(8129), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("Id");

                    b.ToTable("ApplicationRole");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 13, 23, 8, 27, 618, DateTimeKind.Unspecified).AddTicks(2949), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("OtherNames")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StaffIdNumber")
                        .HasColumnType("text");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varbinary(4000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 6, 13, 23, 8, 27, 623, DateTimeKind.Unspecified).AddTicks(7312), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("BillPaymentId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("ChartOfAccountsId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("References")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BillPaymentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BillActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reference")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BillPayments");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillPaymentActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BillPaymentActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookingId")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookedItems");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookedItemActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BookedItemActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("BookingDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(20,2)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId1")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFullyPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPartPayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StaffId")
                        .HasColumnType("text");

                    b.Property<string>("StaffProcessingId")
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId1");

                    b.HasIndex("StaffProcessingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookingActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BookingAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookingSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BookingId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("BookingSales");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ChartOfAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChartOfAccounts");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ChartOfAccountsActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChartOfAccountsActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(44)
                        .HasColumnType("varchar(44)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.CustomerActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CustomerActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset>("SupplyDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalInventoryValuation")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InventoryActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 596, DateTimeKind.Unspecified).AddTicks(5032), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Non Alcoholic drinks",
                            IsDeleted = false,
                            Name = "SOFT DRINKS",
                            Timestamp = new DateTime(2021, 6, 13, 23, 8, 27, 596, DateTimeKind.Utc).AddTicks(5855),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 596, DateTimeKind.Unspecified).AddTicks(5355), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 596, DateTimeKind.Unspecified).AddTicks(6120), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Alcoholic Beverage drinks",
                            IsDeleted = false,
                            Name = "DRINKS",
                            Timestamp = new DateTime(2021, 6, 13, 23, 8, 27, 596, DateTimeKind.Utc).AddTicks(6123),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 596, DateTimeKind.Unspecified).AddTicks(6122), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 596, DateTimeKind.Unspecified).AddTicks(6128), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Both alcoholic and non alcoholic drinks",
                            IsDeleted = false,
                            Name = "WINE AND SPIRITS",
                            Timestamp = new DateTime(2021, 6, 13, 23, 8, 27, 596, DateTimeKind.Utc).AddTicks(6131),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 596, DateTimeKind.Unspecified).AddTicks(6129), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 596, DateTimeKind.Unspecified).AddTicks(6135), new TimeSpan(0, 1, 0, 0, 0)),
                            CreatedBy = "SYSTEM",
                            Description = "Cooked Food and other types of Food",
                            IsDeleted = false,
                            Name = "FOODS",
                            Timestamp = new DateTime(2021, 6, 13, 23, 8, 27, 596, DateTimeKind.Utc).AddTicks(6139),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 596, DateTimeKind.Unspecified).AddTicks(6136), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedBy = "SYSTEM"
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryCategoryActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InventoryCategoryActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("InvoicePaymentId")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("InvoicePaymentStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoicePaymentId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoiceActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoicePayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reference")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoicePayments");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoicePaymentsActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoicePaymentsActionAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp");

                    b.Property<float>("OrderedItemsCount")
                        .HasColumnType("float");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9424), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Semo-Any",
                            ItemName = "Semovita/Any Soup",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9433), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9441), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Eba-Any",
                            ItemName = "Eba/Any Soup",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9444), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9451), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Beans-P",
                            ItemName = "Beans-Plantain",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9452), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9458), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "F-Rice",
                            ItemName = "Fried Rice",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9459), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9466), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "J-Rice",
                            ItemName = "Jollof Rice",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9467), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9473), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Rice-Stew",
                            ItemName = "Rice-Stew",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9475), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9481), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Chips-Eggs",
                            ItemName = "Chips-Eggs",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9482), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9488), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "IndomieEgg",
                            ItemName = "Indomie-Egg",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9490), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9498), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "LeafMoimoi",
                            ItemName = "Leaf Moimoi",
                            Price = 200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9500), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9505), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "CowLeg",
                            ItemName = "CowLeg P.Soup",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9506), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9600), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Cowtail",
                            ItemName = "CowTail P.Soup",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9602), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9609), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Fresh-Fish",
                            ItemName = "Fresh Fish",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9611), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9618), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Intestine",
                            ItemName = "Intestine",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9620), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9625), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "PepChicken",
                            ItemName = "Peppered Chicken",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9627), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9632), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "PepGoat",
                            ItemName = "Asun",
                            Price = 700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9633), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9638), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Gizdodo",
                            ItemName = "Gizdodo",
                            Price = 600m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9640), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9645), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Coleslaw",
                            ItemName = "Coleslaw",
                            Price = 200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9647), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9652), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "MixedSalad",
                            ItemName = "Mixed Salad",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9653), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9659), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Semo-Any",
                            ItemName = "Potato Salad",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9660), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9666), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ShwmChick",
                            ItemName = "Shawarma Chicken",
                            Price = 1200m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9668), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9673), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ShwmBeef",
                            ItemName = "Shawarma Beef",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9674), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9680), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ShwmChick",
                            ItemName = "Burger",
                            Price = 1000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9681), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9686), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "TilapiaBig",
                            ItemName = "Roasted Tilapia",
                            Price = 2000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9688), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9692), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "TilapiaSm",
                            ItemName = "Roasted Tilapia",
                            Price = 1800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9694), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9699), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "StmCatfish",
                            ItemName = "Steamed Catfish",
                            Price = 3500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9700), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9705), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "CatfishSm",
                            ItemName = "Steamed Catfish",
                            Price = 3000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9706), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9711), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Isiewu",
                            ItemName = "Isiewu",
                            Price = 800m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9713), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9718), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Heineken",
                            ItemName = "Heineken",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9719), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9724), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "MedStout",
                            ItemName = "Medium Stout",
                            Price = 400m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9725), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9730), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "ExSmooth",
                            ItemName = "Extra Smooth",
                            Price = 400m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9732), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9737), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Smirnoff",
                            ItemName = "Smirnoff Ice",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9738), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9743), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Big-Origin",
                            ItemName = "Big Origin",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9745), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9750), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Tiger",
                            ItemName = "Tiger",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9751), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9756), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Radler",
                            ItemName = "Radler",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9758), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9763), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Gulder",
                            ItemName = "Gulder",
                            Price = 350m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9764), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9769), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Golfberg",
                            ItemName = "Golfberg",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9771), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9776), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Star",
                            ItemName = "Star",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9777), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9782), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "StarLite",
                            ItemName = "StarLite",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9784), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9788), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Legend",
                            ItemName = "Legend",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9790), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9795), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "CastleLite",
                            ItemName = "Castle-Lite",
                            Price = 350m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9796), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9801), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "D-Black",
                            ItemName = "Double-Black",
                            Price = 350m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9803), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9807), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Hero",
                            ItemName = "Hero",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9809), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9814), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Trophy",
                            ItemName = "Trophy",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9815), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9820), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Budweiser",
                            ItemName = "Budweiser",
                            Price = 450m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9822), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9826), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Coke",
                            ItemName = "Coke",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9828), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9833), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Sprite",
                            ItemName = "Sprite",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9834), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9839), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Fanta",
                            ItemName = "Fanta",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9840), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9845), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Can-Malt",
                            ItemName = "Can Malt",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9846), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9852), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "MaltBottle",
                            ItemName = "Bottled Malt",
                            Price = 300m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9853), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9858), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Juice",
                            ItemName = "Juice",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9860), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9864), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Water",
                            ItemName = "Water",
                            Price = 100m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9866), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9870), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "EnergyDnk",
                            ItemName = "Energy Drink",
                            Price = 500m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9872), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9877), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Mateaus",
                            ItemName = "Mateaus",
                            Price = 3000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9878), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9883), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Donfed",
                            ItemName = "DonFelder",
                            Price = 3000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9885), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9890), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Donfed",
                            ItemName = "Four Cousins",
                            Price = 2700m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9892), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9897), new TimeSpan(0, 1, 0, 0, 0)),
                            IsDeleted = false,
                            ItemCode = "Baron",
                            ItemName = "Baron",
                            Price = 2000m,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 6, 14, 0, 8, 27, 597, DateTimeKind.Unspecified).AddTicks(9899), new TimeSpan(0, 1, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderItemActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderItemActionsAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderSales");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(767)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedItems");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderedItemActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderedItemActionAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductInventoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductUniqueIdentifier")
                        .HasColumnType("text");

                    b.Property<double>("QuantityBought")
                        .HasColumnType("double");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int>("UnitMeasure")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductInventoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductCategoryActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategoryActionsAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<string>("ServiceBookingId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceBookingId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ServiceActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceActionsAudits");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.StaffShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(90)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("OffDay")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("ShiftEndsAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("ShiftStartsAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffShifts");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.StaffShiftActionsAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StaffShiftActionsAudit");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("varchar(44)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.SupplierActionAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SupplierActionsAudits");
                });

            modelBuilder.Entity("BillChartOfAccounts", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Bill", null)
                        .WithMany()
                        .HasForeignKey("BillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.ChartOfAccounts", null)
                        .WithMany()
                        .HasForeignKey("ChartOfAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChartOfAccountsInvoice", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.ChartOfAccounts", null)
                        .WithMany()
                        .HasForeignKey("ChartOfAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Invoice", null)
                        .WithMany()
                        .HasForeignKey("InvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Bill", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.BillPayment", "BillPayment")
                        .WithMany("Bills")
                        .HasForeignKey("BillPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RektaManagerApp.Shared.Supplier", "Supplier")
                        .WithMany("SupplierBills")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillPayment");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookedItem", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Booking", "RequiredBooking")
                        .WithMany("BookedItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RequiredBooking");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Booking", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Customer", "Customer")
                        .WithMany("CustomerBookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RektaManagerApp.Shared.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId1");

                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", "StaffProcessing")
                        .WithMany("HandledBookings")
                        .HasForeignKey("StaffProcessingId");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("StaffProcessing");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BookingSales", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Booking", "Booking")
                        .WithMany("BookingSalesInvoices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Invoice", "Invoice")
                        .WithMany("Bookings")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InventoryCategory", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Inventory", null)
                        .WithMany("InventoryCategories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Invoice", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Customer", "Customer")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.InvoicePayment", "InvoicePayment")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoicePaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("InvoicePayment");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Order", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", "Staff")
                        .WithMany("ProcessedOrders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderSales", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Invoice", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Order", "Order")
                        .WithMany("OrderSalesInvoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.OrderedItem", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Order", "OwningOrder")
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OwningOrder");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Product", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Inventory", "ProductInventory")
                        .WithMany("Products")
                        .HasForeignKey("ProductInventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RektaManagerApp.Shared.Supplier", null)
                        .WithMany("SuppliedProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInventory");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ProductCategory", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Product", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Service", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.Booking", "ServiceBooking")
                        .WithMany("BookedServices")
                        .HasForeignKey("ServiceBookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceBooking");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.StaffShift", b =>
                {
                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", null)
                        .WithMany("StaffShifts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("RektaManagerApp.Shared.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.ApplicationUser", b =>
                {
                    b.Navigation("HandledBookings");

                    b.Navigation("ProcessedOrders");

                    b.Navigation("StaffShifts");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.BillPayment", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Booking", b =>
                {
                    b.Navigation("BookedItems");

                    b.Navigation("BookedServices");

                    b.Navigation("BookingSalesInvoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Customer", b =>
                {
                    b.Navigation("CustomerBookings");

                    b.Navigation("CustomerInvoices");

                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Inventory", b =>
                {
                    b.Navigation("InventoryCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Invoice", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.InvoicePayment", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Order", b =>
                {
                    b.Navigation("OrderedItems");

                    b.Navigation("OrderSalesInvoices");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("RektaManagerApp.Shared.Supplier", b =>
                {
                    b.Navigation("SuppliedProducts");

                    b.Navigation("SupplierBills");
                });
#pragma warning restore 612, 618
        }
    }
}
