@page "/products/edit-menu"
@inject IHttpService Http
@using RektaManagerApp.Shared.ComponentModels.Orders
@inject IModalService Modal

<div class="d-flex justify-content-center align-items-center">
    <h3 class="h3">Edit Menu Items</h3>
</div>
<div class="d-flex">
    <SfGrid DataSource="@orderItems" AllowSorting="true" AllowPaging="true">
        <GridPageSettings PageSizes="10"></GridPageSettings>
        <GridColumns>
            <GridColumn HeaderText="Menu ID" TextAlign="TextAlign.Center" Field="@nameof(OrderItem.Id)" AllowSorting="false" AllowEditing="false"></GridColumn>
            <GridColumn Field="@nameof(OrderItem.ItemName)" TextAlign="TextAlign.Center" HeaderText="Menu Name"></GridColumn>
            <GridColumn Field="@nameof(OrderItem.ItemCode)" TextAlign="TextAlign.Center" HeaderText="Menu Code"></GridColumn>
            <GridColumn Field="@nameof(OrderItem.ImageUrl)" TextAlign="TextAlign.Center" HeaderText="Path To Image"></GridColumn>
            <GridColumn Field="@nameof(OrderItem.Price)" TextAlign="TextAlign.Center" HeaderText="Menu Price"></GridColumn>
            <GridColumn HeaderText="Actions" HeaderTextAlign="TextAlign.Center">
                <Template>
                    @{
                        var orderItem = (context as OrderItem);
                        <span>
                            <button @onclick="@(() => @ShowEditModal(orderItem))" class="btn btn-outline-info">
                                <span class="bi bi-pencil-square"></span>
                            </button>
                        </span>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>
@code {
    private List<OrderItem> orderItems = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync<List<OrderItem>>("api/orders/menuItems");

        if (response.Success == false)
            Console.WriteLine(response.HttpResponseMessage.StatusCode);
        orderItems = response.Response;
    }

    private void ShowEditModal(OrderItem item)
    {
        var targetItem = new OrderItemUpsertComponentModel
        {
            OrderItemId = item.Id,
            ImageUrl = item.ImageUrl,
            ItemName = item.ItemName,
            Price = item.Price
        };

        var parameters = new ModalParameters();
        parameters.Add("Model", targetItem);

        Modal.Show<Orders.EditOrderItem>("Edit Menu Item", parameters);
    }
}
