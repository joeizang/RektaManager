@using RektaManagerApp.Shared.ComponentModels.Invoices
@using RektaManagerApp.Shared.ComponentModels.Bookings
@using RektaManagerApp.Shared.ComponentModels.Services
@inject AuthenticationStateProvider AuthProvider

<div class="card shadow d-flex justify-content-center align-items-center p-1 mb-4 col-12">
    <EditForm Model="@Model" OnValidSubmit="@HandleSubmit" class="w-75 pr-3 pt-3">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>
                <b>Booking Date :</b>
            </label>
            <SfDatePicker CssClass="form-control" TValue="DateTime" @bind-Value="@Model.TransactionDate" Min="@minDate" Max="@maxDate" @ref="@DatePicker" Format="dd-MM-yyyy">
                <DatePickerEvents TValue="DateTime" Focus="@((Syncfusion.Blazor.Calendars.FocusEventArgs args) => DatePicker.Show())"></DatePickerEvents>
            </SfDatePicker>
            <span class="text-danger"><ValidationMessage For="@(() => Model.TransactionDate)" /></span>
        </div>
        <div class="form-group">
            <label>
                <b>Customer Name :</b>
            </label>
            <InputText class="form-control" @bind-Value="@Model.CustomerName" />
            <span class="text-danger"><ValidationMessage For="@(() => Model.CustomerName)" /></span>
        </div>

        <div class="form-group">
            <label>
                <b>Select Services :</b>
            </label>
            <select class="custom-select" multiple>
                <option class="text-secondary">Select several services by using Control + Click....</option>
                @foreach (var service in Services)
                {
                    <option value="@service.ServiceId" @onclick="@(() => Model.Services.Add(service.ServiceId))">@service.ServiceName</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label>
                <b>Select Bookable Items :</b>
            </label>
            <select class="custom-select" multiple>
                <option class="text-secondary">Select several bookable items by using Control + Click....</option>
                @foreach (var bookedItem in BookedItems)
                {
                    <option value="@bookedItem.BookedItemId" 
                            @onclick="@(() => Model.BookedItems.Add(bookedItem.BookedItemId))">
                        @bookedItem.ItemName
                    </option>
                }
            </select>
        </div>


        <div class="form-group">
            <label>
                <b>Amount :</b>
            </label>
            <InputNumber class="form-control" @bind-Value="@Model.Amount" />
            <span class="text-danger"><ValidationMessage For="@(() => Model.Amount)" /></span>
        </div>
        <div class="form-group">
            <label>
                <b>Part Payment? :</b>
            </label>
            <SfSwitch @bind-Checked="@Model.FullyPaid" />
        </div>
        <div class="form-group">
            <label>
                <b>Description :</b>
            </label>
            <InputTextArea class="form-control" @bind-Value="@Model.Description" />
            <span class="text-danger"><ValidationMessage For="@(() => Model.Description)" /></span>
        </div>
        <div class="form-group">
            <label>
                <b>Attending Staff :</b>
            </label>
            <InputText class="form-control" @bind-Value="@Model.AttendingStaff" readonly />
            <span class="text-danger"><ValidationMessage For="@(() => Model.CustomerPhone)" /></span>
        </div>
        <div class="form-group">
            <label>
                <b>Event Date :</b>
            </label>
            <SfDatePicker CssClass="form-control" TValue="DateTime" @bind-Value="@Model.DueDate" Min="@minDate" Max="@maxDate" @ref="@EventDateRef" Format="dd-MM-yyyy">
                <DatePickerEvents TValue="DateTime" Focus="@((Syncfusion.Blazor.Calendars.FocusEventArgs args) => EventDateRef.Show())"></DatePickerEvents>
            </SfDatePicker>
            <span class="text-danger"><ValidationMessage For="@(() => Model.DueDate)" /></span>
        </div>

        <div class="form-group">
            <button class="btn btn-block btn-outline-primary">
                <span class="bi bi-bookmark-plus-fill">Issue Invoice</span>
            </button>
        </div>
    </EditForm>
</div>


@code {
    [Parameter]
    public InvoiceUpsertComponentModel Model { get; set; }

    [Parameter]
    public List<ServiceDropdownModel> Services { get; set; }

    [Parameter]
    public List<BookedItemDropdownModel> BookedItems { get; set; }

    [Parameter]
    public EventCallback HandleSubmit { get; set; }

    SfDatePicker<DateTime> DatePicker;

    SfDatePicker<DateTime> EventDateRef;

    private DateTime minDate = new DateTime(2020, 01, 01);

    private DateTime maxDate = DateTime.UtcNow.AddMonths(6);

    public AuthenticationState AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthState = await AuthProvider.GetAuthenticationStateAsync();
        Model.AttendingStaff = AuthState.User.Identity.Name ?? "Anonymous";
    }

}
