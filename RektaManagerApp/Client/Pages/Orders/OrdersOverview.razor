@using RektaManagerApp.Shared.ComponentModels.Orders
@using Blazored.LocalStorage
@inject ISyncLocalStorageService LocalStorage
@inject IOrderService OrderService
@inject AuthenticationStateProvider AuthProvider
@inject IModalService Modal 
@implements IDisposable




@if (GetCartCount() > 0)
{
    <button class="btn btn-info" @onclick="@FinishOrder">
        <span>Items in Order:</span>
        <span class="badge badge-pill badge-light"><b>@GetCartCount()</b></span>
    </button>
}
else
{
    <button class="btn btn-info" disabled="disabled">
        <span>No Item in Order yet!</span>
    </button>
}


<SfDialog IsModal="true" @bind-Visible="@_showDialog" Width="30rem" ShowCloseIcon="true">
    <DialogTemplates>
        <Header><h3 class="h3">Finish the Order</h3></Header>
        <Content>
            <FinishOrder OrderedItems="@CurrentCart" AuthState="AuthStateProvider" />
        </Content>
    </DialogTemplates>
</SfDialog>

@code {

    public List<OrderedItemUpsertComponentModel> CurrentCart { get; set; } = new();

    public AuthenticationState AuthStateProvider { get; set; }

    private bool _showDialog = false;

    protected override async Task OnInitializedAsync()
    {
        OrderService.OnChange += StateHasChanged;
        AuthStateProvider = await AuthProvider.GetAuthenticationStateAsync();
    }

    private int GetCartCount()
    {
        CurrentCart = LocalStorage.GetItem<List<OrderedItemUpsertComponentModel>>("currentCart");
        return CurrentCart?.Count ?? 0;
    }

    private void FinishOrder()
    {
        _showDialog = true;

    }

    public void Dispose()
    {
        OrderService.OnChange -= StateHasChanged;
    }

}
