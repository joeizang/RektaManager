@using RektaManagerApp.Shared.ComponentModels.Orders
@using RektaManagerApp.Shared
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject IHttpService Http
@inject IToastService Toast
@inject ILocalStorageService LocalStorage

<div class="table-responsive">
    <table class="table-bordered w-100">
        <thead class="thead-light">
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @if (OrderedItems is null)
            {


                <tr>Nothing Added to Order Yet!</tr>
            }
            else
            {
                @foreach (var item in OrderedItems)
                {
                    <tr>
                        <td>@item.ItemName</td>
                        <td>@item.Quantity</td>
                        <td>@item.ItemPrice</td>
                        <td>@CalculateTotal((decimal)@item.Quantity, @item.ItemPrice)</td>
                    </tr>
                }
            }
            <tr class="h-25">
                <td></td>
                <td></td>
                <td></td>
                <td>@_grandTotal</td>
            </tr>
            <tr>
                <td><button class="btn btn-success bi bi-award" @onclick="@MakeSale" disabled="@DisableBtn"></button></td>
                <td>
                    <span style="display: @Visibility">
                        <ActionSpinner ActionName="Please wait" ColorVariant="text-dark" />
                    </span>
                </td>
            </tr>
        </tbody>
    </table>
</div>

@code {

    [Parameter]
    public List<OrderedItemUpsertComponentModel> OrderedItems { get; set; } = new();

    public string Visibility { get; set; } = "none";

    public bool DisableBtn { get; set; } = false;

    [Parameter]
    public AuthenticationState AuthState { get; set; }

    decimal _grandTotal;

    private decimal CalculateTotal(decimal amount, decimal amount1)
    {
        var result = amount * amount1;
        _grandTotal = result;
        return result;
    }

    private async Task MakeSale()
    {
        DisableBtn = true;
        Visibility = "inline";

        //create order and populate with everything needed
        var order = new OrderUpsertComponentModel();

        order.OrderedItems = OrderedItems;
        order.OrderDate = DateTimeOffset.UtcNow;
        order.CustomerName = OrderedItems.First().CustomerName;
        order.StaffId = AuthState.User.Identity?.Name;
        order.Timestamp = DateTimeOffset.UtcNow.LocalDateTime;
        order.OrderTotal = _grandTotal;

        var response = await Http.Post<OrderUpsertComponentModel>("api/orders", order);

        DisableBtn = false;
        Visibility = "none";

        if (response.Success == false)
            Toast.ShowError("There was an error placing your order!", "Order Failed!");

        Toast.ShowSuccess("Placed Order Successfully", "Order Success");
        await LocalStorage.ClearAsync();
        Navigation.NavigateTo("orders");
    }

}
