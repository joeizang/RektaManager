@using RektaManagerApp.Shared.ComponentModels.Orders
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService Modal

<div class="col-4 mb-3 d-flex">
    <div class="card shadow-lg d-flex" @onclick="@(() => AddOrderedItem())"
         style="border: @(_borderSwitch ? _switch : ""); width: 13rem;">
        <img class="card-img" src="@Item.ImageUrl" alt="cardImage" width="105" height="105"/>
        <div class="card-img-overlay">
            <h3 class="card-title card-headings font-weight-bolder text-light">@Item.ItemName</h3>
            <span class="card-headings place-price h6 p-2 font-weight-bolder text-light bg-secondary rounded" id="price">
                =N= @Item.Price.ToString("N1")
            </span>
        </div>
    </div>
</div>



@code {

    [Parameter]
    public OrderItemComponentModel Item { get; set; }

    [CascadingParameter]
    public OrderState State { get; set; }

    public OrderedItemUpsertComponentModel OrderedItem { get; set; } = new();

    public AuthenticationState AuthState { get; set; }

    private bool _borderSwitch = false;

    private string _switch = "3px solid #bac842";

    protected override async Task OnInitializedAsync()
    {
        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private void AddOrderedItem()
    {
        var parameters = new ModalParameters();
        parameters.Add("Model", Item);
        parameters.Add("NewOrderedItem", OrderedItem);
        parameters.Add(nameof(AuthState), AuthState);

        var options = new ModalOptions();
        options.Position = ModalPosition.Center;
        options.HideCloseButton = true;
        Modal.Show<AddOrderedItem>("Finish Adding Item", parameters, options);
    }

}
