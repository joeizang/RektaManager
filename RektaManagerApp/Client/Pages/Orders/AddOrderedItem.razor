@using RektaManagerApp.Shared.ComponentModels.Orders
@using Blazored.LocalStorage
@inject AuthenticationStateProvider AuthProvider
@inject ILocalStorageService LocalStorage
@inject IHttpService Http
@inject IOrderService OrderService
@inject NavigationManager Navigation
@inject IToastService Toast
@inject IModalService Modal
<h3>Add <b>@Model.ItemName</b></h3>
<EditForm Model="@NewOrderedItem" OnValidSubmit="HandleOrderAddition">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="itemName"><b> Item Name :</b></label>
        <InputText @bind-Value="@Model.ItemName" readonly class="form-control col-sm-6" id="itemName" />
    </div>

    <div class="form-group">
        <label for="itemPrice"><b> Price :</b></label>
        <InputNumber TValue="decimal" @bind-Value="@Model.Price" readonly class="form-control col-sm-4" id="itemPrice" />
    </div>

    <div class="form-group">
        <label for="itemQuantity"><b> Quantity :</b></label>
        <InputNumber TValue="float" @bind-Value="@Model.Quantity" class="form-control col-sm-4" id="itemQuantity" />
        <ValidationMessage For="@(() => Model.Quantity)" />
    </div>

    <div class="form-group">
        <span class="text-danger">
            <ValidationSummary />
        </span>
    </div>
    <div class="form-group"><button class="btn btn-success" type="submit">Add</button></div>
</EditForm>

@code {
    [Parameter]
    public OrderItemComponentModel Model { get; set; }

    [Parameter]
    public OrderedItemUpsertComponentModel NewOrderedItem { get; set; }

    [CascadingParameter]
    public OrderState State { get; set; }

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; }

    public AuthenticationState AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthState = await AuthProvider.GetAuthenticationStateAsync();
    }

    public async Task HandleOrderAddition()
    {
        //TODO: Now notification badge to indicate order and work on finishing order (order->invoice->invoicepayment)
        //once the item has been added. Close the dialog. also we need to store the order summary in localstorage
        NewOrderedItem.ItemCode = Model.ItemName;
        NewOrderedItem.ItemName = Model.ItemName;
        NewOrderedItem.Quantity = Model.Quantity;
        NewOrderedItem.ItemPrice = Model.Price;
        NewOrderedItem.SalesStaff = AuthState.User.Identity?.Name;
        NewOrderedItem.OrderDate = DateTimeOffset.UtcNow.LocalDateTime;
        NewOrderedItem.CustomerName = Guid.NewGuid().ToString("N");

        State.OrderedItems.Add(NewOrderedItem);

        await OrderService.AddToCart(State.OrderedItems);
        Toast.ShowSuccess("Added to Order Successfully!", "Order Updated!");

        Navigation.NavigateTo("orders/make-orders");
        await ModalInstance.CloseAsync();
    }
}
