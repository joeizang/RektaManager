@page "/bookings"
@using RektaManagerApp.Shared.ComponentModels.Bookings
@inject IHttpService Http
@inject IToastService Toast
@inject IModalService Modal
@inject NavigationManager Navigation

<div class="d-flex justify-content-center align-items-center mb-3">
    <h3 class="h3">Bookings List</h3>
</div>

<div class="d-flex justify-content-between align-items-center mb-4">
    <span>
        <button @onclick="@(() => Navigation.NavigateTo("bookings/create-booking"))" class="btn btn-outline-primary">
            <span class="bi bi-plus-circle-fill"></span>
            Make Booking
        </button>
    </span>
    <span>
        <button @onclick="@(() => Navigation.NavigateTo("bookings/services"))" class="btn btn-outline-primary">
            <span class="bi bi-pen-fill"></span>
            Update Services
        </button>
    </span>
    <span>
        <button @onclick="@(() => Navigation.NavigateTo("bookings/bookedItems"))" class="btn btn-outline-primary">
            <span class="bi bi-pen-fill"></span>
            Update Rental Items
        </button>
    </span>
</div>

<div>
    <SfGrid DataSource="@_bookings" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridColumns>
            <GridColumn Field="@nameof(BookingComponentModel.BookingId)" HeaderText="Booking ID" TextAlign="TextAlign.Center" AllowEditing="false"></GridColumn>
            <GridColumn Field="@nameof(BookingComponentModel.BookedBy)" HeaderText="Booked By" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(BookingComponentModel.BookingDate)" HeaderText="Date" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(BookingComponentModel.EventDate)" HeaderText="Booked Date" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(BookingComponentModel.CustomerName)" HeaderText="Customer" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(BookingComponentModel.IsFullyPaid)" HeaderText="Fully Paid" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(BookingComponentModel.IsPartPaid)" HeaderText="Partly paid" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn AllowFiltering="false">
                <Template>
                    @{
                        var booking = (context as BookingComponentModel);
                        <span class="btn-group" role="group">
                            <button class="btn btn-outline-info btn-sm" @onclick="@(() => BookingDetail(booking.BookingId))"><span class="bi bi-eye-fill"></span></button>
                            <button class="btn btn-outline-info btn-sm" @onclick="@(() => BookingDetail(booking.BookingId))"><span class="bi bi-pencil-square"></span></button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="@(() => DeleteBooking(booking.BookingId))">
                                <span class="bi bi-trash2-fill"></span>
                            </button>
                        </span>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

@code {
    private List<BookingComponentModel> _bookings = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync<List<BookingComponentModel>>("api/bookings");

        if (response.Success)
            _bookings = response.Response;
    }

    private void DeleteBooking(string id)
    {
        Modal.Show<DeleteBooking>();
    }

    private async Task BookingDetail(string id)
    {
        Modal.Show<UpdateBooking>();
    }

    private async Task UpdateBooking(string id)
    {
        Modal.Show<UpdateBooking>();
    }

}
